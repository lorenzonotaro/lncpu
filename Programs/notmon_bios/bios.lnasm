%ifndef LOC_BIOS
    %error "Specify BIOS location via %define LOC_BIOS <address> before %include"
%endif

%ifndef     F_BIOS
%define     F_BIOS

%include        "defs.lnasm"

.org LOC_BIOS
;   Resets the buffer write and read pointers.
;   Modifies registers: none.
IO_INIT_BUFFER:
    mov         0x0,        [BUFWPT]        ; store 0 in both the buffer write and read pointers
    mov         0x0,        [BUFRPT]
    ret

;   Checks whether there are characters available to read:
;       - if there are, the zero flag is cleared and the next available character is read
;       - if there aren't, the zero flag is set
;   Modifies registers: RA
IO_GETC:
    push        RB                          ; preserve RB
    mov         [BUFWPT],   RA              ; store the write pointer and the read pointer
    mov         [BUFRPT],   RB              ; in RA and RB, respectively
    cmp         RA,         RB              ; subtract the read pointer to the write pointer
    jz          _notavail                   ; if they are equal, there are no available characters
    push        RC                          ; preserve RC, RD
    push        RD
    mov         INPBUF,     RC              ; move the input buffer page into RC
    mov         RB,         RD              ; and the buffer read pointer in RB
    mov         [RC:RD],    RA              ; read the character from the buffer and store it RA
    inc         RD                          ; increment the buffer read pointer and store it back
    mov         RD,         [BUFRPT]
    pop         RD                          ; restore RD, RC
    pop         RC
    xor         RB,         RB              ; these two instructions ensure that the zero flag is not set
    inc         RB                          ; before returning (until I implement Set/Clear Carry Flag instructions :))
_notavail:
    pop         RB                          ; restore RB
    ret

;   Writes a the character contained in RA to the output.
;   Modifies registers: none.
IO_PUTC:
    mov         RA,         [TTYOUT]        ; write RA to the output device
    ret


%endif