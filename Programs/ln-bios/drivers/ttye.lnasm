%ifndef BIOS_TTYE_F
%define BIOS_TTYE_F

.section BIOS_TTYE

; lnc compliant
; ttye_putc: (RA = char)
; lnc signature: void ttye_putc(char c);
ttye_putc:
    push    RC
    push    RD

    mov     [STDTXT_DD_START_PAGE], RC  ; load start page of standard text device in RC
    mov     2, RD                        ; write to address to of the TTYE to output a char

    mov     RA, [RC:RD]                  ; write RA to the output device

    pop     RD
    pop     RC
    ret

; lnc compliant
; ttye_puts: (RC:RD = string)
; lnc signature: void ttye_puts(const char* str);
ttye_puts:
    push    RA
    push    RB
    push    RC
    push    RD
_loop:
    mov     [RC:RD], RA      ; load next char from string
    cmp     RA, 0            ; null terminator?
    jz      _end_loop

    push    RC
    push    RD

    mov     [STDTXT_DD_START_PAGE], RC  ; load start page of standard text device in RC
    mov     2, RD                        ; write to address to of the TTYE to output a char

    mov     RA, [RC:RD]                  ; write RA to the output device
    
    pop     RD
    pop     RC

    inc     RD
    jc      _carryrc
    goto    _loop
_carryrc:
    inc     RC
    goto    _loop
_end_loop:
    pop     RD
    pop     RC
    pop     RB
    pop     RA
    ret

; lnc compliant
; 
; ttye_handle_interrupt: (RC:RD = start address of device)
; 
; checks if the ttye device has an generated an interrupt and handles it
;
; lnc signature: ```void ttye_handle_interrupt(void far *dev);```
ttye_handle_interrupt:
    push    RA
    push    RD

    mov     [RC:RD], RA     ; address 0 of device: check if avail
    cmp     RA, 0
    jz      _ret            ; not available, return
    inc     RD
    mov     [RC:RD], RA     ; address 1 of device: get data
    lcall   wrtinbuf
_ret:
    pop     RD
    pop     RA
    ret

%endif