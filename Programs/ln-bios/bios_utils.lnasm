%include "io"

%ifndef BIOS_UTILS_F
%define BIOS_UTILS_F

; BIOS STATUS CODES

; Code indicating BIOS is initializing
%define BIOS_STATUS_INITIALIZING 0x00

; Code indicating BIOS is done with initialization
%define BIOS_STATUS_READY        0x01

; Code indicating that BIOS has transferred control to the OS
%define BIOS_STATUS_IN_OS        0x02

; Code indicating BIOS has not found a standard text output device (and was compiled with HALT_ON_NO_STDTXT)
%define BIOS_STATUS_CRIT_NO_STDTXT 0x80

; Code indicating that an interrupt was received but no device could handle it
%define BIOS_STATUS_CRIT_INT_NO_DEV 0x81

; Code indicating BIOS is in an unspecified critical error state
%define BIOS_STATUS_CRIT_UNSPEC  0xFF

.section BIOS_UTILS

; lnc compliant
; 
; Prints a log prefix indicating a successful operation.
;
; log_prefix_ok: ()
;
; lnc signature: ```void log_prefix_ok(); ```
log_prefix_ok: 
    push RC
    push RD

    mov (OK_PREFIX >> 8)::byte, RC
    mov (OK_PREFIX & 0xFF)::byte, RD
    lcall puts

    pop RD
    pop RC
    ret

; lnc compliant
;
; Prints a log prefix indicating an error.
;
; log_prefix_err: ()
;
; lnc signature: ```void log_prefix_err(); ```
log_prefix_err:
    push RC
    push RD

    mov (ERR_PREFIX >> 8)::byte, RC
    mov (ERR_PREFIX & 0xFF)::byte, RD
    lcall puts

    pop RD
    pop RC
    ret

; lnc compliant
;
; Prints a log prefix indicating a warning.
;
; log_prefix_warn: ()
;
; lnc signature: ```void log_prefix_warn(); ```
log_prefix_warn:
    push RC
    push RD

    mov (WARN_PREFIX >> 8)::byte, RC
    mov (WARN_PREFIX & 0xFF)::byte, RD
    lcall puts

    pop RD
    pop RC
    ret

; lnc compliant
;
; Prints a log prefix indicating an informational message.
;
; log_prefix_info: ()
;
; lnc signature: ```void log_prefix_info(); ```
log_prefix_info:
    push RC
    push RD

    mov (INFO_PREFIX >> 8)::byte, RC
    mov (INFO_PREFIX & 0xFF)::byte, RD
    lcall puts

    pop RD
    pop RC
    ret

; lnc compliant
;
; Prints a log prefix indicating a critical error.
;
; log_prefix_crit: ()
;
; lnc signature: ```void log_prefix_crit(); ```
log_prefix_crit:
    push RC
    push RD

    mov (CRIT_PREFIX >> 8)::byte, RC
    mov (CRIT_PREFIX & 0xFF)::byte, RD
    lcall puts

    pop RD
    pop RC
    ret


.section BIOS_DATA
bios_status:
    .res 1

.section BIOS_CONST
OK_PREFIX:
    .data "[ OK ] " 0
ERR_PREFIX:
    .data "[ERR ] " 0
WARN_PREFIX:
    .data "[WARN] " 0
INFO_PREFIX:
    .data "[INFO] " 0 
CRIT_PREFIX:
    .data "[CRIT] " 0

%endif