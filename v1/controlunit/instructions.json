[
    {
        "name": "nop",
        "description": "No operation",
        "microcode": [
            {}
        ],
        "flags_modified": "-"
    },
    {
        "name": "hlt",
        "description": "Halts the CPU",
        "microcode": [
            {
                "NOT_HLT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "$brk$",
        "description": "Reserved opcode (hardware interrupt). Do not use.",
        "microcode": [
            {
                "NOT_IVH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "CSPC_UP": 0
            },
            {
                "NOT_IVL_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_CS_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc",
                "NOT_PC_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc",
                "NOT_FLAGS_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0,
                "SP_MODE_SEL": "inc",
                "FLAGS_MODE_SEL": "set_i"
            }
        ],
        "flags_modified": "I"
    },
    
    {
        "name": "int",
        "description": "Software interrupt. Pushes CS:PC and FLAGS, then calls the interrupt vector",
        "microcode": [
            {
                "NOT_IVH_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_IVL_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_CS_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc",
                "NOT_PC_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc",
                "NOT_FLAGS_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0,
                "SP_MODE_SEL": "inc",
                "FLAGS_MODE_SEL": "set_i"
            }
        ],
        "flags_modified": "I"
    },
    {
        "name": "mov_cst_ra",
        "description": "Moves a constant to RA",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0,
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_rb",
        "description": "Moves a constant to RB",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_RB_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_rc",
        "description": "Moves a constant to RC",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_RC_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_rd",
        "description": "Moves a constant to RD",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_RD_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_sp",
        "description": "Moves a constant to SP",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "SP_MODE_SEL": "bus_in",
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_ss",
        "description": "Moves a constant to SS",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_SS_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_ds",
        "description": "Moves a constant to DS",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_DS_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ss_rd",
        "description": "Moves SS to RD",
        "microcode": [
            {
                "NOT_SS_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_sp_rd",
        "description": "Moves SP to RD",
        "microcode": [
            {
                "NOT_SP_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ds_rd",
        "description": "Moves DS to RD",
        "microcode": [
            {
                "NOT_DS_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ra_rb",
        "description": "Moves RA to RB",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_RB_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ra_rc",
        "description": "Moves RA to RC",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_RC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ra_rd",
        "description": "Moves RA to RD",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rb_ra",
        "description": "Moves RB to RA",
        "microcode": [
            {
                "NOT_RB_OUT": 0,
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rb_rc",
        "description": "Moves RB to RC",
        "microcode": [
            {
                "NOT_RB_OUT": 0,
                "NOT_RC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rb_rd",
        "description": "Moves RB to RD",
        "microcode": [
            {
                "NOT_RB_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rc_ra",
        "description": "Moves RC to RA",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rc_rb",
        "description": "Moves RC to RB",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_RB_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rc_rd",
        "description": "Moves RC to RD",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_ra",
        "description": "Moves RD to RA",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_rb",
        "description": "Moves RD to RB",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "NOT_RB_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_rc",
        "description": "Moves RD to RC",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "NOT_RC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_ss",
        "description": "Moves RD to SS",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "NOT_SS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_sp",
        "description": "Moves RD to SP",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "SP_MODE_SEL": "bus_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_ds",
        "description": "Moves RD to DS",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "NOT_DS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ra_datap",
        "description": "Copies RA to a location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RA_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rb_datap",
        "description": "Copies RB to a location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rc_datap",
        "description": "Copies RC to a location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_datap",
        "description": "Copies RD to a location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_datap_ra",
        "description": "Copies from location in the address space (data page addressing mode) to RA",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_OUT": 0,
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_datap_rb",
        "description": "Copies from location in the address space (data page addressing mode) to RB",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_IN": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_datap_rc",
        "description": "Copies from location in the address space (data page addressing mode) to RC",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_IN": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_datap_rd",
        "description": "Copies from location in the address space (data page addressing mode) to RD",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_IN": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_datap",
        "description": "Copies a constant to a location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ra_ircrd",
        "description": "Copies RA to a location in the address space (full indirect addressing mode)",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RA_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rb_ircrd",
        "description": "Copies RB to a location in the address space (full indirect addressing mode)",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RB_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rc_ircrd",
        "description": "Copies RC to a location in the address space (full indirect addressing mode)",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RC_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_ircrd",
        "description": "Copies RD to a location in the address space (full indirect addressing mode)",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ircrd_ra",
        "description": "Copies from location in the address space (full indirect addressing mode) to RA",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ircrd_rb",
        "description": "Copies from location in the address space (full indirect addressing mode) to RB",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RB_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ircrd_rc",
        "description": "Copies from location in the address space (full indirect addressing mode) to RC",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RC_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ircrd_rd",
        "description": "Copies from location in the address space (full indirect addressing mode) to RD",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RD_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_ircrd",
        "description": "Copies a constant to a location in the address space (full indirect addressing mode)",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_ra_abs",
        "description": "Copies RA to a location in the address space (absolute addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RA_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rb_abs",
        "description": "Copies RB to a location in the address space (absolute addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RB_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rc_abs",
        "description": "Copies RC to a location in the address space (absolute addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RC_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_rd_abs",
        "description": "Copies RD to a location in the address space (absolute addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RD_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_abs_ra",
        "description": "Copies from location in the address space (absolute addressing mode) to RA",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_abs_rb",
        "description": "Copies from location in the address space (absolute addressing mode) to RB",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RB_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_abs_rc",
        "description": "Copies from location in the address space (absolute addressing mode) to RC",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_abs_rd",
        "description": "Copies from location in the address space (absolute addressing mode) to RD",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_cst_abs",
        "description": "Copies a constant to a location in the address space (absolute addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "mov_datap_datap",
        "description": "Copies a location in the address space (data page addressing mode) to another location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "ADDR_SEL": "ds:abl",
                "NOT_DEVICE_IN": 0,
                "NOT_RT_OUT": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_ra",
        "description": "Pushes RA onto the stack",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_rb",
        "description": "Pushes RB onto the stack",
        "microcode": [
            {
                "NOT_RB_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_rc",
        "description": "Pushes RC onto the stack",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_rd",
        "description": "Pushes RD onto the stack",
        "microcode": [
            {
                "NOT_RD_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_datap",
        "description": "Pushes a location in the address space (data page addressing mode) onto the stack",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_ircrd",
        "description": "Pushes a location in the address space (full indirect addressing mode) onto the stack",
        "microcode": [
            {
                "NOT_ABH_IN": 0,
                "NOT_RC_OUT": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_RD_OUT": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RT_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_abs",
        "description": "Pushes a location in the address space (absolute addressing mode) onto the stack",
        "microcode": [
            {
                "NOT_ABH_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "abh:abl",
                "NOT_RT_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "push_cst",
        "description": "Pushes a constant onto the stack",
        "microcode": [
            {
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_ra",
        "description": "Pops from the stack into RA",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp",
                "RA_S": "input"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_rb",
        "description": "Pops from the stack into RB",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_RB_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_rc",
        "description": "Pops from the stack into RC",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_RC_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_rd",
        "description": "Pops from the stack into RD",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_RD_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_datap",
        "description": "Pops from the stack into a location in the address space (data page addressing mode)",
        "microcode": [
            {
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_FETCH": 0,
                "NOT_ABL_IN": 0
            },
            {
                "SP_MODE_SEL": "dec",
                "NOT_RT_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_ircrd",
        "description": "Pops from the stack into a location in the address space (full indirect addressing mode)",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_RT_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "pop_abs",
        "description": "Pops from the stack into a location in the address space (absolute addressing mode)",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp",
                "NOT_RT_IN": 0
            },
            {
                "NOT_ABH_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "abh:abl"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "add_ra_ra",
        "description": "Adds RA to RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_ra_rb",
        "description": "Adds RB to RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rb",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_ra_rc",
        "description": "Adds RC to RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rc",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_ra_rd",
        "description": "Adds RD to RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rd",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rb_ra",
        "description": "Adds RA to RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rb_rb",
        "description": "Adds RB to RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rb",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rb_rc",
        "description": "Adds RC to RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rc",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rb_rd",
        "description": "Adds RD to RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rd",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rc_ra",
        "description": "Adds RA to RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rc_rb",
        "description": "Adds RB to RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rb",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rc_rc",
        "description": "Adds RC to RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rc",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rc_rd",
        "description": "Adds RD to RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rd",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rd_ra",
        "description": "Adds RA to RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rd_rb",
        "description": "Adds RB to RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rb",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rd_rc",
        "description": "Adds RC to RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rc",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rd_rd",
        "description": "Adds RD to RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rd",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_ra_cst",
        "description": "Adds a constant to RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rt",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rb_cst",
        "description": "Adds a constant to RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rt",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rc_cst",
        "description": "Adds a constant to RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rt",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_rd_cst",
        "description": "Adds a constant to RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rt",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_datap_ra",
        "description": "Adds RA to a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "ra",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_datap_rb",
        "description": "Adds RB to a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rb",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_datap_rc",
        "description": "Adds RC to a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rc",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "add_datap_rd",
        "description": "Adds RD to a location in the address space (data page addressing mode), stores the result back in the address space (data page addressing mode), then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rd",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_ra_ra",
        "description": "Subtracts RA from RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_ra_rb",
        "description": "Subtracts RB from RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_ra_rc",
        "description": "Subtracts RC from RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_ra_rd",
        "description": "Subtracts RD from RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rb_ra",
        "description": "Subtracts RA from RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rb_rb",
        "description": "Subtracts RB from RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rb_rc",
        "description": "Subtracts RC from RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rb_rd",
        "description": "Subtracts RD from RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rc_ra",
        "description": "Subtracts RA from RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rc_rb",
        "description": "Subtracts RB from RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rc_rc",
        "description": "Subtracts RC from RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rc_rd",
        "description": "Subtracts RD from RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rd_ra",
        "description": "Subtracts RA from RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rd_rb",
        "description": "Subtracts RB from RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rd_rc",
        "description": "Subtracts RC from RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rd_rd",
        "description": "Subtracts RD from RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_ra_cst",
        "description": "Subtracts a constant from RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rb_cst",
        "description": "Subtracts a constant from RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rc_cst",
        "description": "Subtracts a constant from RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_rd_cst",
        "description": "Subtracts a constant from RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_datap_ra",
        "description": "Subtracts RA from a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_datap_rb",
        "description": "Subtracts RD from a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_datap_rc",
        "description": "Subtracts RC from a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "sub_datap_rd",
        "description": "Subtracts RD from a location in the address space (data page addressing mode), stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_ra_ra",
        "description": "Compares RA to RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_ra_rb",
        "description": "Compares RA to RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "ra",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_ra_rc",
        "description": "Compares RA to RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "ra",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_ra_rd",
        "description": "Compares RA to RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "ra",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rb_ra",
        "description": "Compares RB to RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rb_rb",
        "description": "Compares RB to RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rb",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rb_rc",
        "description": "Compares RB to RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rb",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rb_rd",
        "description": "Compares RB to RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rb",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rc_ra",
        "description": "Compares RC to RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rc_rb",
        "description": "Compares RC to RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rc",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rc_rc",
        "description": "Compares RC to RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rc",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rc_rd",
        "description": "Compares RC to RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rc",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rd_ra",
        "description": "Compares RD to RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rd_rb",
        "description": "Compares RD to RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rd",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rd_rc",
        "description": "Compares RD to RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rd",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rd_rd",
        "description": "Compares RD to RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "X_SEL": "rd",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_ra_cst",
        "description": "Compares RA to a constant, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "X_SEL": "ra",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rb_cst",
        "description": "Compares RB to a constant, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "X_SEL": "rb",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rc_cst",
        "description": "Compares RC to a constant, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "X_SEL": "rc",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_rd_cst",
        "description": "Compares RD to a constant, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "X_SEL": "rd",
                "Y_SEL": "rt",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_datap_ra",
        "description": "Compares the given location in the address space (data page addressing mode) to RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "ra",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_datap_rb",
        "description": "Compares the given location in the address space (data page addressing mode) to RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rb",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_datap_rc",
        "description": "Compares the given location in the address space (data page addressing mode) to RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rc",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "cmp_datap_rd",
        "description": "Compares the given location in the address space (data page addressing mode) to RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rd",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "or_ra_ra",
        "description": "Performs a bitwise OR of RA and RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_ra_rb",
        "description": "Performs a bitwise OR of RA and RB, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rb",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_ra_rc",
        "description": "Performs a bitwise OR of RA and RC, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rc",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_ra_rd",
        "description": "Performs a bitwise OR of RA and RD, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rd",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rb_ra",
        "description": "Performs a bitwise OR of RB and RA, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rb_rb",
        "description": "Performs a bitwise OR of RB and RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rb",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rb_rc",
        "description": "Performs a bitwise OR of RB and RC, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rc",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rb_rd",
        "description": "Performs a bitwise OR of RB and RD, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rd",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rc_ra",
        "description": "Performs a bitwise OR of RC and RA, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rc_rb",
        "description": "Performs a bitwise OR of RC and RB, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rb",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rc_rc",
        "description": "Performs a bitwise OR of RC and RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rc",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rc_rd",
        "description": "Performs a bitwise OR of RC and RD, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rd",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rd_ra",
        "description": "Performs a bitwise OR of RD and RA, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rd_rb",
        "description": "Performs a bitwise OR of RD and RB, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rb",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rd_rc",
        "description": "Performs a bitwise OR of RD and RC, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rc",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rd_rd",
        "description": "Performs a bitwise OR of RD and RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rd",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_ra_cst",
        "description": "Performs a bitwise OR of RA and a constant, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rt",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rb_cst",
        "description": "Performs a bitwise OR of RB and a constant, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rt",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rc_cst",
        "description": "Performs a bitwise OR of RC and a constant, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rt",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_rd_cst",
        "description": "Performs a bitwise OR of RD and a constant, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rt",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "or_datap_ra",
        "description": "Performs a bitwise OR of a location in the address space (data page addressing mode) and RA, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "ra",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "or_datap_rb",
        "description": "Performs a bitwise OR of a location in the address space (data page addressing mode) and RB, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rb",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "or_datap_rc",
        "description": "Performs a bitwise OR of a location in the address space (data page addressing mode) and RC, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rc",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "or_datap_rd",
        "description": "Performs a bitwise OR of a location in the address space (data page addressing mode) and RD, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rd",
                "OP_SEL": "or",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_ra_ra",
        "description": "Performs a bitwise AND of RA and RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_ra_rb",
        "description": "Performs a bitwise AND of RA and RB, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rb",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_ra_rc",
        "description": "Performs a bitwise AND of RA and RC, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rc",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_ra_rd",
        "description": "Performs a bitwise AND of RA and RD, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rd",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rb_ra",
        "description": "Performs a bitwise AND of RB and RA, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rb_rb",
        "description": "Performs a bitwise AND of RB and RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rb",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rb_rc",
        "description": "Performs a bitwise AND of RB and RC, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rc",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rb_rd",
        "description": "Performs a bitwise AND of RB and RD, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rd",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rc_ra",
        "description": "Performs a bitwise AND of RC and RA, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rc_rb",
        "description": "Performs a bitwise AND of RC and RB, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rb",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rc_rc",
        "description": "Performs a bitwise AND of RC and RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rc",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rc_rd",
        "description": "Performs a bitwise AND of RC and RD, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rd",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rd_ra",
        "description": "Performs a bitwise AND of RD and RA, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rd_rb",
        "description": "Performs a bitwise AND of RD and RB, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rb",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rd_rc",
        "description": "Performs a bitwise AND of RD and RC, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rc",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rd_rd",
        "description": "Performs a bitwise AND of RD and RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rd",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_ra_cst",
        "description": "Performs a bitwise AND of RA and a constant, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rt",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rb_cst",
        "description": "Performs a bitwise AND of RB and a constant, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rt",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rc_cst",
        "description": "Performs a bitwise AND of RC and a constant, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rt",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_rd_cst",
        "description": "Performs a bitwise AND of RD and a constant, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rt",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_datap_ra",
        "description": "Performs a bitwise AND of a location in the address space (data page addressing mode) and RA, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "ra",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_datap_rb",
        "description": "Performs a bitwise AND of a location in the address space (data page addressing mode) and RB, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rb",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_datap_rc",
        "description": "Performs a bitwise AND of a location in the address space (data page addressing mode) and RC, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rc",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "and_datap_rd",
        "description": "Performs a bitwise AND of a location in the address space (data page addressing mode) and RD, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rd",
                "OP_SEL": "and",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_ra_ra",
        "description": "Performs a bitwise XOR of RA and RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_ra_rb",
        "description": "Performs a bitwise XOR of RA and RB, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rb",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_ra_rc",
        "description": "Performs a bitwise XOR of RA and RC, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rc",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_ra_rd",
        "description": "Performs a bitwise XOR of RA and RD, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rd",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rb_ra",
        "description": "Performs a bitwise XOR of RB and RA, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rb_rb",
        "description": "Performs a bitwise XOR of RB and RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rb",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rb_rc",
        "description": "Performs a bitwise XOR of RB and RC, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rc",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rb_rd",
        "description": "Performs a bitwise XOR of RB and RD, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rd",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rc_ra",
        "description": "Performs a bitwise XOR of RC and RA, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rc_rb",
        "description": "Performs a bitwise XOR of RC and RB, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rb",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rc_rc",
        "description": "Performs a bitwise XOR of RC and RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rc",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rc_rd",
        "description": "Performs a bitwise XOR of RC and RD, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rd",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rd_ra",
        "description": "Performs a bitwise XOR of RD and RA, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rd_rb",
        "description": "Performs a bitwise XOR of RD and RB, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rb",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rd_rc",
        "description": "Performs a bitwise XOR of RD and RC, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rc",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rd_rd",
        "description": "Performs a bitwise XOR of RD and RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rd",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_ra_cst",
        "description": "Performs a bitwise XOR of RA and a constant, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "rt",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rb_cst",
        "description": "Performs a bitwise XOR of RB and a constant, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "rt",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rc_cst",
        "description": "Performs a bitwise XOR of RC and a constant, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "rt",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_rd_cst",
        "description": "Performs a bitwise XOR of RD and a constant, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RT_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "rt",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_datap_ra",
        "description": "Performs a bitwise XOR of a location in the address space (data page addressing mode) and RA, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "ra",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_datap_rb",
        "description": "Performs a bitwise XOR of a location in the address space (data page addressing mode) and RB, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rb",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_datap_rc",
        "description": "Performs a bitwise XOR of a location in the address space (data page addressing mode) and RC, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rc",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "xor_datap_rd",
        "description": "Performs a bitwise XOR of a location in the address space (data page addressing mode) and RD, stores the result back in the given location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "rd",
                "OP_SEL": "xor",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "not_ra",
        "description": "Performs a bitwise NOT of RA, stores the result back in RA, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "ra",
                "OP_SEL": "not",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "not_rb",
        "description": "Performs a bitwise NOT of RB, stores the result back in RB, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "ra",
                "OP_SEL": "not",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "not_rc",
        "description": "Performs a bitwise NOT of RC, stores the result back in RC, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "ra",
                "OP_SEL": "not",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "not_rd",
        "description": "Performs a bitwise NOT of RD, stores the result back in RD, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "ra",
                "OP_SEL": "not",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "not_datap",
        "description": "Performs a bitwise NOT of a location in the address space (page 0 addressing mode), stores the result back in the location, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "OP_SEL": "not",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "inc_ra",
        "description": "Increments RA by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "1",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "inc_rb",
        "description": "Increments RB by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "1",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "inc_rc",
        "description": "Increments RC by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "1",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "inc_rd",
        "description": "Increments RD by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "1",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "inc_datap",
        "description": "Increments a location in the address space (data page addressing mode) by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "1",
                "OP_SEL": "add",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "dec_ra",
        "description": "Decrements RA by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "RA_S": "input",
                "X_SEL": "ra",
                "Y_SEL": "1",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "dec_rb",
        "description": "Decrements RB by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RB_IN": 0,
                "X_SEL": "rb",
                "Y_SEL": "1",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "dec_rc",
        "description": "Decrements RC by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RC_IN": 0,
                "X_SEL": "rc",
                "Y_SEL": "1",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "dec_rd",
        "description": "Decrements RD by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_RD_IN": 0,
                "X_SEL": "rd",
                "Y_SEL": "1",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "dec_datap",
        "description": "Decrements a location in the address space (data page addressing mode) by 1, then updates the FLAGS accordingly",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_PC_INC": 0,
                "NOT_FETCH": 0
            },
            {
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ds:abl",
                "NOT_RT_IN": 0
            },
            {
                "X_SEL": "rt",
                "Y_SEL": "1",
                "OP_SEL": "sub",
                "FLAGS_MODE_SEL": "alu_in",
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ds:abl"
            }
        ],
        "flags_modified": "NZC"
    },
    {
        "name": "shl_ra",
        "description": "Performs a left bitwise shift of RA by 1 bit",
        "microcode": [
            {
                "RA_S": "shift_left"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "shr_ra",
        "description": "Performs a right bitwise shift of RA by 1 bit",
        "microcode": [
            {
                "RA_S": "shift_right"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "swap_ra_rb",
        "description": "Swaps the values of RA and RB",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_RB_OUT": 0,
                "RA_S": "input"
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_RB_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "swap_ra_rc",
        "description": "Swaps the values of RA and RC",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_RC_OUT": 0,
                "RA_S": "input"
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_RC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "swap_ra_rd",
        "description": "Swaps the values of RA and RD",
        "microcode": [
            {
                "NOT_RA_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "RA_S": "input"
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "swap_rb_rc",
        "description": "Swaps the values of RB and RC",
        "microcode": [
            {
                "NOT_RB_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_RC_OUT": 0,
                "NOT_RB_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_RC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "swap_rb_rd",
        "description": "Swaps the values of RB and RD",
        "microcode": [
            {
                "NOT_RB_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_RB_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "swap_rc_rd",
        "description": "Swaps the values of RC and RD",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_RT_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_RC_IN": 0
            },
            {
                "NOT_RT_OUT": 0,
                "NOT_RD_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "jc_cst",
        "description": "Jumps to the given short address (same code segment) if the carry flag is set",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "JC": 1,
                "NOT_PC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "jn_cst",
        "description": "Jumps to the given short address (same code segment) if the negative flag is set",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "JN": 1,
                "NOT_PC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "jz_cst",
        "description": "Jumps to the given short address (same code segment) if the zero flag is set",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "JZ": 1,
                "NOT_PC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "goto_cst",
        "description": "Jumps to the given short address (same code segment)",
        "microcode": [
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "J": 1,
                "NOT_PC_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "ljc_dcst",
        "description": "Jumps to the given long address if the carry flag is set",
        "microcode": [
            {
                "NOT_ABH_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "JC": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "ljn_dcst",
        "description": "Jumps to the given long address if the negative flag is set",
        "microcode": [
            {
                "NOT_ABH_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "JN": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "ljz_dcst",
        "description": "Jumps to the given long address if the zero flag is set",
        "microcode": [
            {
                "NOT_ABH_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "JZ": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "lgoto_dcst",
        "description": "Jumps to the given long address",
        "microcode": [
            {
                "NOT_ABH_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "NOT_ABL_IN": 0,
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "lgoto_rcrd",
        "description": "Jumps to the long address specified by RC:RD",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "lcall_dcst",
        "description": "Calls the given long address",
        "microcode": [
            {
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_FETCH": 0,
                "NOT_PC_INC": 0,
                "NOT_DATA_LATCH_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_CS_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc",
                "NOT_PC_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0,
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "lcall_rcrd",
        "description": "Calls the long address specified by RC:RD",
        "microcode": [
            {
                "NOT_RC_OUT": 0,
                "NOT_ABH_IN": 0
            },
            {
                "NOT_RD_OUT": 0,
                "NOT_ABL_IN": 0
            },
            {
                "NOT_CS_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "inc",
                "NOT_PC_OUT": 0,
                "NOT_DEVICE_IN": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0,
                "SP_MODE_SEL": "inc"
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "ret",
        "description": "Returns from a call",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_ABL_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            },
            {                
                "SP_MODE_SEL": "dec",
                "NOT_ABH_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "iret",
        "description": "Returns from an interrupt",
        "microcode": [
            {
                "SP_MODE_SEL": "dec",
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp",
                "FLAGS_MODE_SEL": "bus_in"
            },
            {
                "SP_MODE_SEL": "dec",
                "NOT_ABL_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "SP_MODE_SEL": "dec",
                "NOT_ABH_IN": 0,
                "NOT_DEVICE_OUT": 0,
                "ADDR_SEL": "ss:sp"
            },
            {
                "J": 1,
                "NOT_PC_IN": 0,
                "NOT_CS_IN": 0
            }
        ],
        "flags_modified": "-"
    },
    {
        "name": "cid",
        "description": "Clears the interrupt disable flag",
        "microcode": [
            {
                "FLAGS_MODE_SEL": "reset_i"
            }
        ],
        "flags_modified": "I"
    },
    {
        "name": "sid",
        "description": "Sets the interrupt disable flag",
        "microcode": [
            {
                "FLAGS_MODE_SEL": "set_i"
            }
        ],
        "flags_modified": "I"
    },
    {
        "name": "clc",
        "description": "Clears the carry flag",
        "microcode": [
            {
                "FLAGS_MODE_SEL": "reset_c"
            }
        ],
        "flags_modified": "C"
    },
    {
        "name": "sec",
        "description": "Sets the carry flag",
        "microcode": [
            {
                "FLAGS_MODE_SEL": "set_c"
            }
        ],
        "flags_modified": "C"
    }
]