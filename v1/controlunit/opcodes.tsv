Opcode	Name	Data length	Clock cycles	Description
0x0	nop	1	1	No operation
0x1	hlt	1	1	Halts the CPU
0x2	brk	1	7	Pushes CS:PC and FLAGS, then calls the interrupt vector
0x3	mov_cst_ra	2	2	Moves a constant to RA
0x4	mov_cst_rb	2	2	Moves a constant to RB
0x5	mov_cst_rc	2	2	Moves a constant to RC
0x6	mov_cst_rd	2	2	Moves a constant to RD
0x7	mov_cst_sp	2	2	Moves a constant to SP
0x8	mov_cst_ss	2	2	Moves a constant to SS
0x9	mov_ss_rd	1	1	Moves SS to RD
0xa	mov_sp_rd	1	1	Moves SP to RD
0xb	mov_ra_rb	1	1	Moves RA to RB
0xc	mov_ra_rc	1	1	Moves RA to RC
0xd	mov_ra_rd	1	1	Moves RA to RD
0xe	mov_rb_ra	1	1	Moves RB to RA
0xf	mov_rb_rc	1	1	Moves RB to RC
0x10	mov_rb_rd	1	1	Moves RB to RD
0x11	mov_rc_ra	1	1	Moves RC to RA
0x12	mov_rc_rb	1	1	Moves RC to RB
0x13	mov_rc_rd	1	1	Moves RC to RD
0x14	mov_rd_ra	1	1	Moves RD to RA
0x15	mov_rd_rb	1	1	Moves RD to RB
0x16	mov_rd_rc	1	1	Moves RD to RC
0x17	mov_rd_ss	1	1	Moves RD to SS
0x18	mov_rd_sp	1	1	Moves RD to SP
0x19	mov_ra_page0	2	2	Copies RA to a location in the address space (zero page addressing mode)
0x1a	mov_rb_page0	2	2	Copies RB to a location in the address space (zero page addressing mode)
0x1b	mov_rc_page0	2	2	Copies RC to a location in the address space (zero page addressing mode)
0x1c	mov_rd_page0	2	2	Copies RD to a location in the address space (zero page addressing mode)
0x1d	mov_page0_ra	2	2	Copies from location in the address space (zero page addressing mode) to RA
0x1e	mov_page0_rb	2	2	Copies from location in the address space (zero page addressing mode) to RB
0x1f	mov_page0_rc	2	2	Copies from location in the address space (zero page addressing mode) to RC
0x20	mov_page0_rd	2	2	Copies from location in the address space (zero page addressing mode) to RD
0x21	mov_cst_page0	3	3	Copies a constant to a location in the address space (zero page addressing mode)
0x22	mov_ra_ifullrcrd	1	3	Copies RA to a location in the address space (full indirect addressing mode)
0x23	mov_rb_ifullrcrd	1	3	Copies RB to a location in the address space (full indirect addressing mode)
0x24	mov_rc_ifullrcrd	1	3	Copies RC to a location in the address space (full indirect addressing mode)
0x25	mov_rd_ifullrcrd	1	3	Copies RD to a location in the address space (full indirect addressing mode)
0x26	mov_ifullrcrd_ra	1	3	Copies from location in the address space (full indirect addressing mode) to RA
0x27	mov_ifullrcrd_rb	1	3	Copies from location in the address space (full indirect addressing mode) to RB
0x28	mov_ifullrcrd_rc	1	3	Copies from location in the address space (full indirect addressing mode) to RC
0x29	mov_ifullrcrd_rd	1	3	Copies from location in the address space (full indirect addressing mode) to RD
0x2a	mov_cst_ifullrcrd	2	4	Copies a constant to a location in the address space (full indirect addressing mode)
0x2b	mov_ra_abs	3	3	Copies RA to a location in the address space (absolute addressing mode)
0x2c	mov_rb_abs	3	3	Copies RB to a location in the address space (absolute addressing mode)
0x2d	mov_rc_abs	3	3	Copies RC to a location in the address space (absolute addressing mode)
0x2e	mov_rd_abs	3	3	Copies RD to a location in the address space (absolute addressing mode)
0x2f	mov_abs_ra	3	3	Copies from location in the address space (absolute addressing mode) to RA
0x30	mov_abs_rb	3	3	Copies from location in the address space (absolute addressing mode) to RB
0x31	mov_abs_rc	3	3	Copies from location in the address space (absolute addressing mode) to RC
0x32	mov_abs_rd	3	3	Copies from location in the address space (absolute addressing mode) to RD
0x33	mov_cst_abs	4	4	Copies a constant to a location in the address space (absolute addressing mode)
0x34	mov_page0_page0	3	4	Copies a location in the address space (zero page addressing mode) to another location in the address space (zero page addressing mode)
0x35	push_ra	1	2	Pushes RA onto the stack
0x36	push_rb	1	2	Pushes RB onto the stack
0x37	push_rc	1	2	Pushes RC onto the stack
0x38	push_rd	1	2	Pushes RD onto the stack
0x39	push_page0	2	4	Pushes a location in the address space (zero page addressing mode) onto the stack
0x3a	push_ifullrcrd	1	5	Pushes a location in the address space (full indirect addressing mode) onto the stack
0x3b	push_abs	2	5	Pushes a location in the address space (absolute addressing mode) onto the stack
0x3c	push_cst	2	2	Pushes a constant onto the stack
0x3d	pop_ra	1	1	Pops from the stack into RA
0x3e	pop_rb	1	1	Pops from the stack into RB
0x3f	pop_rc	1	1	Pops from the stack into RC
0x40	pop_rd	1	1	Pops from the stack into RD
0x41	pop_page0	2	3	Pops from the stack into a location in the address space (zero page addressing mode)
0x42	pop_ifullrcrd	1	4	Pops from the stack into a location in the address space (full indirect addressing mode)
0x43	pop_abs	3	4	Pops from the stack into a location in the address space (absolute addressing mode)
0x44	add_ra_ra	1	1	Adds RA to RA, stores the result back in RA, then updates the FLAGS accordingly
0x45	add_ra_rb	1	1	Adds RB to RA, stores the result back in RA, then updates the FLAGS accordingly
0x46	add_ra_rc	1	1	Adds RC to RA, stores the result back in RA, then updates the FLAGS accordingly
0x47	add_ra_rd	1	1	Adds RD to RA, stores the result back in RA, then updates the FLAGS accordingly
0x48	add_rb_ra	1	1	Adds RA to RB, stores the result back in RB, then updates the FLAGS accordingly
0x49	add_rb_rb	1	1	Adds RB to RB, stores the result back in RB, then updates the FLAGS accordingly
0x4a	add_rb_rc	1	1	Adds RC to RB, stores the result back in RB, then updates the FLAGS accordingly
0x4b	add_rb_rd	1	1	Adds RD to RB, stores the result back in RB, then updates the FLAGS accordingly
0x4c	add_rc_ra	1	1	Adds RA to RC, stores the result back in RC, then updates the FLAGS accordingly
0x4d	add_rc_rb	1	1	Adds RB to RC, stores the result back in RC, then updates the FLAGS accordingly
0x4e	add_rc_rc	1	1	Adds RC to RC, stores the result back in RC, then updates the FLAGS accordingly
0x4f	add_rc_rd	1	1	Adds RD to RC, stores the result back in RC, then updates the FLAGS accordingly
0x50	add_rd_ra	1	1	Adds RA to RD, stores the result back in RD, then updates the FLAGS accordingly
0x51	add_rd_rb	1	1	Adds RB to RD, stores the result back in RD, then updates the FLAGS accordingly
0x52	add_rd_rc	1	1	Adds RC to RD, stores the result back in RD, then updates the FLAGS accordingly
0x53	add_rd_rd	1	1	Adds RD to RD, stores the result back in RD, then updates the FLAGS accordingly
0x54	add_ra_cst	2	2	Adds a constant to RA, stores the result back in RA, then updates the FLAGS accordingly
0x55	add_rb_cst	2	2	Adds a constant to RB, stores the result back in RB, then updates the FLAGS accordingly
0x56	add_rc_cst	2	2	Adds a constant to RC, stores the result back in RC, then updates the FLAGS accordingly
0x57	add_rd_cst	2	2	Adds a constant to RD, stores the result back in RD, then updates the FLAGS accordingly
0x58	sub_ra_ra	1	1	Subtracts RA from RA, stores the result back in RA, then updates the FLAGS accordingly
0x59	sub_ra_rb	1	1	Subtracts RB from RA, stores the result back in RA, then updates the FLAGS accordingly
0x5a	sub_ra_rc	1	1	Subtracts RC from RA, stores the result back in RA, then updates the FLAGS accordingly
0x5b	sub_ra_rd	1	1	Subtracts RD from RA, stores the result back in RA, then updates the FLAGS accordingly
0x5c	sub_rb_ra	1	1	Subtracts RA from RB, stores the result back in RB, then updates the FLAGS accordingly
0x5d	sub_rb_rb	1	1	Subtracts RB from RB, stores the result back in RB, then updates the FLAGS accordingly
0x5e	sub_rb_rc	1	1	Subtracts RC from RB, stores the result back in RB, then updates the FLAGS accordingly
0x5f	sub_rb_rd	1	1	Subtracts RD from RB, stores the result back in RB, then updates the FLAGS accordingly
0x60	sub_rc_ra	1	1	Subtracts RA from RC, stores the result back in RC, then updates the FLAGS accordingly
0x61	sub_rc_rb	1	1	Subtracts RB from RC, stores the result back in RC, then updates the FLAGS accordingly
0x62	sub_rc_rc	1	1	Subtracts RC from RC, stores the result back in RC, then updates the FLAGS accordingly
0x63	sub_rc_rd	1	1	Subtracts RD from RC, stores the result back in RC, then updates the FLAGS accordingly
0x64	sub_rd_ra	1	1	Subtracts RA from RD, stores the result back in RD, then updates the FLAGS accordingly
0x65	sub_rd_rb	1	1	Subtracts RB from RD, stores the result back in RD, then updates the FLAGS accordingly
0x66	sub_rd_rc	1	1	Subtracts RC from RD, stores the result back in RD, then updates the FLAGS accordingly
0x67	sub_rd_rd	1	1	Subtracts RD from RD, stores the result back in RD, then updates the FLAGS accordingly
0x68	sub_ra_cst	2	2	Subtracts a constant from RA, stores the result back in RA, then updates the FLAGS accordingly
0x69	sub_rb_cst	2	2	Subtracts a constant from RB, stores the result back in RB, then updates the FLAGS accordingly
0x6a	sub_rc_cst	2	2	Subtracts a constant from RC, stores the result back in RC, then updates the FLAGS accordingly
0x6b	sub_rd_cst	2	2	Subtracts a constant from RD, stores the result back in RD, then updates the FLAGS accordingly
0x6c	cmp_ra_ra	1	1	Compares RA to RA, then updates the FLAGS accordingly
0x6d	cmp_ra_rb	1	1	Compares RA to RB, then updates the FLAGS accordingly
0x6e	cmp_ra_rc	1	1	Compares RA to RC, then updates the FLAGS accordingly
0x6f	cmp_ra_rd	1	1	Compares RA to RD, then updates the FLAGS accordingly
0x70	cmp_rb_ra	1	1	Compares RB to RA, then updates the FLAGS accordingly
0x71	cmp_rb_rb	1	1	Compares RB to RB, then updates the FLAGS accordingly
0x72	cmp_rb_rc	1	1	Compares RB to RC, then updates the FLAGS accordingly
0x73	cmp_rb_rd	1	1	Compares RB to RD, then updates the FLAGS accordingly
0x74	cmp_rc_ra	1	1	Compares RC to RA, then updates the FLAGS accordingly
0x75	cmp_rc_rb	1	1	Compares RC to RB, then updates the FLAGS accordingly
0x76	cmp_rc_rc	1	1	Compares RC to RC, then updates the FLAGS accordingly
0x77	cmp_rc_rd	1	1	Compares RC to RD, then updates the FLAGS accordingly
0x78	cmp_rd_ra	1	1	Compares RD to RA, then updates the FLAGS accordingly
0x79	cmp_rd_rb	1	1	Compares RD to RB, then updates the FLAGS accordingly
0x7a	cmp_rd_rc	1	1	Compares RD to RC, then updates the FLAGS accordingly
0x7b	cmp_rd_rd	1	1	Compares RD to RD, then updates the FLAGS accordingly
0x7c	cmp_ra_cst	2	2	Compares RA to a constant, then updates the FLAGS accordingly
0x7d	cmp_rb_cst	2	2	Compares RB to a constant, then updates the FLAGS accordingly
0x7e	cmp_rc_cst	2	2	Compares RC to a constant, then updates the FLAGS accordingly
0x7f	cmp_rd_cst	2	2	Compares RD to a constant, then updates the FLAGS accordingly
0x80	or_ra_ra	1	1	Performs a bitwise OR of RA and RA, stores the result back in RA, then updates the FLAGS accordingly
0x81	or_ra_rb	1	1	Performs a bitwise OR of RA and RB, stores the result back in RA, then updates the FLAGS accordingly
0x82	or_ra_rc	1	1	Performs a bitwise OR of RA and RC, stores the result back in RA, then updates the FLAGS accordingly
0x83	or_ra_rd	1	1	Performs a bitwise OR of RA and RD, stores the result back in RA, then updates the FLAGS accordingly
0x84	or_rb_ra	1	1	Performs a bitwise OR of RB and RA, stores the result back in RB, then updates the FLAGS accordingly
0x85	or_rb_rb	1	1	Performs a bitwise OR of RB and RB, stores the result back in RB, then updates the FLAGS accordingly
0x86	or_rb_rc	1	1	Performs a bitwise OR of RB and RC, stores the result back in RB, then updates the FLAGS accordingly
0x87	or_rb_rd	1	1	Performs a bitwise OR of RB and RD, stores the result back in RB, then updates the FLAGS accordingly
0x88	or_rc_ra	1	1	Performs a bitwise OR of RC and RA, stores the result back in RC, then updates the FLAGS accordingly
0x89	or_rc_rb	1	1	Performs a bitwise OR of RC and RB, stores the result back in RC, then updates the FLAGS accordingly
0x8a	or_rc_rc	1	1	Performs a bitwise OR of RC and RC, stores the result back in RC, then updates the FLAGS accordingly
0x8b	or_rc_rd	1	1	Performs a bitwise OR of RC and RD, stores the result back in RC, then updates the FLAGS accordingly
0x8c	or_rd_ra	1	1	Performs a bitwise OR of RD and RA, stores the result back in RD, then updates the FLAGS accordingly
0x8d	or_rd_rb	1	1	Performs a bitwise OR of RD and RB, stores the result back in RD, then updates the FLAGS accordingly
0x8e	or_rd_rc	1	1	Performs a bitwise OR of RD and RC, stores the result back in RD, then updates the FLAGS accordingly
0x8f	or_rd_rd	1	1	Performs a bitwise OR of RD and RD, stores the result back in RD, then updates the FLAGS accordingly
0x90	or_ra_cst	2	2	Performs a bitwise OR of RA and a constant, stores the result back in RA, then updates the FLAGS accordingly
0x91	or_rb_cst	2	2	Performs a bitwise OR of RB and a constant, stores the result back in RB, then updates the FLAGS accordingly
0x92	or_rc_cst	2	2	Performs a bitwise OR of RC and a constant, stores the result back in RC, then updates the FLAGS accordingly
0x93	or_rd_cst	2	2	Performs a bitwise OR of RD and a constant, stores the result back in RD, then updates the FLAGS accordingly
0x94	and_ra_ra	1	1	Performs a bitwise AND of RA and RA, stores the result back in RA, then updates the FLAGS accordingly
0x95	and_ra_rb	1	1	Performs a bitwise AND of RA and RB, stores the result back in RA, then updates the FLAGS accordingly
0x96	and_ra_rc	1	1	Performs a bitwise AND of RA and RC, stores the result back in RA, then updates the FLAGS accordingly
0x97	and_ra_rd	1	1	Performs a bitwise AND of RA and RD, stores the result back in RA, then updates the FLAGS accordingly
0x98	and_rb_ra	1	1	Performs a bitwise AND of RB and RA, stores the result back in RB, then updates the FLAGS accordingly
0x99	and_rb_rb	1	1	Performs a bitwise AND of RB and RB, stores the result back in RB, then updates the FLAGS accordingly
0x9a	and_rb_rc	1	1	Performs a bitwise AND of RB and RC, stores the result back in RB, then updates the FLAGS accordingly
0x9b	and_rb_rd	1	1	Performs a bitwise AND of RB and RD, stores the result back in RB, then updates the FLAGS accordingly
0x9c	and_rc_ra	1	1	Performs a bitwise AND of RC and RA, stores the result back in RC, then updates the FLAGS accordingly
0x9d	and_rc_rb	1	1	Performs a bitwise AND of RC and RB, stores the result back in RC, then updates the FLAGS accordingly
0x9e	and_rc_rc	1	1	Performs a bitwise AND of RC and RC, stores the result back in RC, then updates the FLAGS accordingly
0x9f	and_rc_rd	1	1	Performs a bitwise AND of RC and RD, stores the result back in RC, then updates the FLAGS accordingly
0xa0	and_rd_ra	1	1	Performs a bitwise AND of RD and RA, stores the result back in RD, then updates the FLAGS accordingly
0xa1	and_rd_rb	1	1	Performs a bitwise AND of RD and RB, stores the result back in RD, then updates the FLAGS accordingly
0xa2	and_rd_rc	1	1	Performs a bitwise AND of RD and RC, stores the result back in RD, then updates the FLAGS accordingly
0xa3	and_rd_rd	1	1	Performs a bitwise AND of RD and RD, stores the result back in RD, then updates the FLAGS accordingly
0xa4	and_ra_cst	2	2	Performs a bitwise AND of RA and a constant, stores the result back in RA, then updates the FLAGS accordingly
0xa5	and_rb_cst	2	2	Performs a bitwise AND of RB and a constant, stores the result back in RB, then updates the FLAGS accordingly
0xa6	and_rc_cst	2	2	Performs a bitwise AND of RC and a constant, stores the result back in RC, then updates the FLAGS accordingly
0xa7	and_rd_cst	2	2	Performs a bitwise AND of RD and a constant, stores the result back in RD, then updates the FLAGS accordingly
0xa8	xor_ra_ra	1	1	Performs a bitwise XOR of RA and RA, stores the result back in RA, then updates the FLAGS accordingly
0xa9	xor_ra_rb	1	1	Performs a bitwise XOR of RA and RB, stores the result back in RA, then updates the FLAGS accordingly
0xaa	xor_ra_rc	1	1	Performs a bitwise XOR of RA and RC, stores the result back in RA, then updates the FLAGS accordingly
0xab	xor_ra_rd	1	1	Performs a bitwise XOR of RA and RD, stores the result back in RA, then updates the FLAGS accordingly
0xac	xor_rb_ra	1	1	Performs a bitwise XOR of RB and RA, stores the result back in RB, then updates the FLAGS accordingly
0xad	xor_rb_rb	1	1	Performs a bitwise XOR of RB and RB, stores the result back in RB, then updates the FLAGS accordingly
0xae	xor_rb_rc	1	1	Performs a bitwise XOR of RB and RC, stores the result back in RB, then updates the FLAGS accordingly
0xaf	xor_rb_rd	1	1	Performs a bitwise XOR of RB and RD, stores the result back in RB, then updates the FLAGS accordingly
0xb0	xor_rc_ra	1	1	Performs a bitwise XOR of RC and RA, stores the result back in RC, then updates the FLAGS accordingly
0xb1	xor_rc_rb	1	1	Performs a bitwise XOR of RC and RB, stores the result back in RC, then updates the FLAGS accordingly
0xb2	xor_rc_rc	1	1	Performs a bitwise XOR of RC and RC, stores the result back in RC, then updates the FLAGS accordingly
0xb3	xor_rc_rd	1	1	Performs a bitwise XOR of RC and RD, stores the result back in RC, then updates the FLAGS accordingly
0xb4	xor_rd_ra	1	1	Performs a bitwise XOR of RD and RA, stores the result back in RD, then updates the FLAGS accordingly
0xb5	xor_rd_rb	1	1	Performs a bitwise XOR of RD and RB, stores the result back in RD, then updates the FLAGS accordingly
0xb6	xor_rd_rc	1	1	Performs a bitwise XOR of RD and RC, stores the result back in RD, then updates the FLAGS accordingly
0xb7	xor_rd_rd	1	1	Performs a bitwise XOR of RD and RD, stores the result back in RD, then updates the FLAGS accordingly
0xb8	xor_ra_cst	2	2	Performs a bitwise XOR of RA and a constant, stores the result back in RA, then updates the FLAGS accordingly
0xb9	xor_rb_cst	2	2	Performs a bitwise XOR of RB and a constant, stores the result back in RB, then updates the FLAGS accordingly
0xba	xor_rc_cst	2	2	Performs a bitwise XOR of RC and a constant, stores the result back in RC, then updates the FLAGS accordingly
0xbb	xor_rd_cst	2	2	Performs a bitwise XOR of RD and a constant, stores the result back in RD, then updates the FLAGS accordingly
0xbc	not_ra	1	1	Performs a bitwise NOT of RA, stores the result back in RA, then updates the FLAGS accordingly
0xbd	not_rb	1	1	Performs a bitwise NOT of RB, stores the result back in RB, then updates the FLAGS accordingly
0xbe	not_rc	1	1	Performs a bitwise NOT of RC, stores the result back in RC, then updates the FLAGS accordingly
0xbf	not_rd	1	1	Performs a bitwise NOT of RD, stores the result back in RD, then updates the FLAGS accordingly
0xc0	inc_ra	1	1	Increments RA by 1, then updates the FLAGS accordingly
0xc1	inc_rb	1	1	Increments RB by 1, then updates the FLAGS accordingly
0xc2	inc_rc	1	1	Increments RC by 1, then updates the FLAGS accordingly
0xc3	inc_rd	1	1	Increments RD by 1, then updates the FLAGS accordingly
0xc4	dec_ra	1	1	Decrements RA by 1, then updates the FLAGS accordingly
0xc5	dec_rb	1	1	Decrements RB by 1, then updates the FLAGS accordingly
0xc6	dec_rc	1	1	Decrements RC by 1, then updates the FLAGS accordingly
0xc7	dec_rd	1	1	Decrements RD by 1, then updates the FLAGS accordingly
0xc8	shl_ra	1	1	Performs a left bitwise shift of RA by 1 bit
0xc9	shr_ra	1	1	Performs a right bitwise shift of RA by 1 bit
0xca	swap_ra_rb	1	3	Swaps the values of RA and RB
0xcb	swap_ra_rc	1	3	Swaps the values of RA and RC
0xcc	swap_ra_rd	1	3	Swaps the values of RA and RD
0xcd	swap_rb_rc	1	3	Swaps the values of RB and RC
0xce	swap_rb_rd	1	3	Swaps the values of RB and RD
0xcf	swap_rc_rd	1	3	Swaps the values of RC and RD
0xd0	jc_cst	2	3	Jumps to the given short address (same code segment) if the carry flag is set
0xd1	jn_cst	2	3	Jumps to the given short address (same code segment) if the negative flag is set
0xd2	jz_cst	2	3	Jumps to the given short address (same code segment) if the zero flag is set
0xd3	goto_cst	2	3	Jumps to the given short address (same code segment)
0xd4	ljc_dcst	3	4	Jumps to the given long address if the carry flag is set
0xd5	ljn_dcst	3	4	Jumps to the given long address if the negative flag is set
0xd6	ljz_dcst	3	4	Jumps to the given long address if the zero flag is set
0xd7	lgoto_dcst	3	4	Jumps to the given long address
0xd8	lgoto_ifullrcrd	1	4	Jumps to the given long address (full indirect addressing mode)
0xd9	lcall_dcst	3	6	Calls the given long address
0xda	lcall_ifullrcrd	1	6	Calls the given long address (full indirect addressing mode)
0xdb	ret	1	4	Returns from a call
0xdc	iret	1	5	Returns from an interrupt
0xdd	cid	1	1	Clears the interrupt disable flag
0xde	sid	1	1	Sets the interrupt disable flag
0xdf	clc	1	1	Clears the carry flag
0xe0	sec	1	1	Sets the carry flag
