package com.lnc.cc.codegen;

import java.util.List;

/**
 * The AsmLevelOptimizer class applies a series of assembly-level
 * optimization passes to transform and improve the assembly code
 * generated by the compiler. These optimizations are conducted
 * iteratively until no further changes are detected.
 *
 * The optimizations are performed by various passes, each specializing
 * in a specific transformation or pattern elimination, such as removing
 * redundant instructions or cleaning up unused labels.
 *
 * This class also provides functionality for preserving the stack frame
 * during register modifications, which ensures the correctness of the
 * generated code when certain transformations are applied.
 */
public class AsmLevelOptimizer {
    private final List<AbstractAsmLevelLinearPass> passes = List.of(
            new RedundantGotoEliminationPass(),
            new RedundantRegisterMoveEliminationPass(),
            new TwoWayMoveEliminationPass(),
            new CommuteAndEliminateMovePass(),
            new UselessLabelPass(),
            new RedundantCmpPass()
    );

    public void optimize(CompilerOutput output) {
        boolean changed;
        do {
            changed = false;
            for (AbstractAsmLevelLinearPass pass : passes) {
                if (pass.runPass(output.code())) {
                    changed = true;
                }
            }
        } while (changed);
    }

    public void stackFramePreservation(CompilerOutput output) {

        if(output.unit() == null) {
            throw new IllegalStateException("Cannot add register preservation pass without an IR unit.");
        }

        StackFramePreservationPass pass = new StackFramePreservationPass(output.unit());
        pass.runPass(output.code());
    }
}
