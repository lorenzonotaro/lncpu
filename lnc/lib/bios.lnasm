%ifndef     F_BIOS
%define     F_BIOS

%include        <kbtty>

%ifndef SECTION BIOS
    %error "BIOS requires a section in ROM named BIOS."
%endif

.section BIOS
;   Resets the buffer write and read pointers.
;   Modifies registers: none.
IO_INIT_BUFFER:
    mov         0x0,        [BUFWPT]        ; store 0 in both the buffer write and read pointers
    mov         0x0,        [BUFRPT]
    ret

;   Checks whether there are characters available to read:
;       - if there are, the carry flag is cleared and the next available character is read
;       - if there aren't, the carry flag is set
;   Modifies registers: RA
IO_GETC:
    push        RB                          ; preserve RB
    mov         [BUFWPT],   RA              ; store the write pointer and the read pointer
    mov         [BUFRPT],   RB              ; in RA and RB, respectively
    cmp         RA,         RB              ; subtract the read pointer to the write pointer
    jz          _notavail                   ; if they are equal, there are no available characters
    push        RC                          ; preserve RC, RD
    push        RD
    mov         (INPUT_BUFFER >> 8)::byte,     RC ; move the input buffer page into RC
    mov         RB,         RD              ; and the buffer read pointer in RB
    mov         [RC:RD],    RA              ; read the character from the buffer and store it RA
    inc         RD                          ; increment the buffer read pointer and store it back
    mov         RD,         [BUFRPT]
    pop         RD                          ; restore RD, RC
    pop         RC
    clc                                     ; clear the carry flag then return
    goto        _ret
_notavail:
    sec                                     ; set the carry flag before returning
_ret:
    pop         RB                          ; restore RB
    ret

;   Writes a the character contained in RA to the output.
;   Modifies registers: none.
IO_PUTC:
    mov         RA,         [TTYOUT]        ; write RA to the output device
    ret


.section    DPAGE                           ; reserve BIOS page 0 variables
BUFWPT:
    .res 1

BUFRPT:
    .res 1

.section    INPUT_BUFFER
    .res 256

.section    INTVEC
IRQ_HANDLER:
    push            RA                          ; preserve RA
    mov             [KBAVAIL],      RA          ; check if IRQ comes from the keyboard (this also resets the IRQ from the device)
    cmp             RA,             0
    jz              _notkb                      ; if it doesn't return from interrupt
    mov             [KBNEXT],       RA          ; if it does, retrieve the character
    
    mov             RA,             [TTYOUT]    ; echo.

    push            RC                          ; preserve RC, and RD
    push            RD

    mov             (INPUT_BUFFER >> 8)::byte,  RC ; load the buffer page and write pointer into RC:RD
    mov             [BUFWPT],       RD
    mov             RA,             [RC:RD]     ; read the character from the buffer
    inc             RD                          ; advance the write pointer and store it back
    mov             RD,             [BUFWPT]

    pop             RD                          ; restore RC, RD
    pop             RC
_notkb:
    pop             RA                          ; restore RA
    iret


%endif