%include <kbtty>
%include <numutils>
%include <ioutils>

%ifndef F_NOTMON
%define F_NOTMON

%define NBUFPG                              0x3e    ; notmon input buffer page (second to last page of memory)

.section    NOTMON
notmon:
    xor             RB,             RB              ; set RB to 0
    mov             NBUFPG,         RC              ; load NBUFPG:0 into RC:RD (as the write buffer)
    xor             RD,             RD
    mov             '>',            [TTYOUT]
    mov             ' ',            [TTYOUT]
_loop:
    lcall           IO_GETC                         ; get the next character 
    jc              _loop                           ; if there is none available, IO_GETC sets the Carry flag

    mov             RA,             [RC:RD]         ; write the newly read character to the buffer

    cmp             RA,             '\n'            ; newline?
    jz              _parse

    cmp             RA,             '\b'            ; backspace?
    jz              _backspace

    inc             RD                              ; increment the buffer
    goto            _loop

_backspace:
    cmp             RD,             0               ; is the buffer empty?
    jz              _loop                           ; if so, ignore the backspace character

    dec             RD                              ; decrement the buffer
    goto            _loop

_parse:
    swap            RB,             RD              ; swap RB and RD so that:
                                                    ; RD becomes 0 (index to read the buffer from now on)
                                                    ; RB becomes the buffer length

    cmp             RB,             1               ; single character?
    jz              _command
    
    cmp             RB,             4               ; at this point, if there are less then 4 characters it's an error
    jc              _err


    push            RB                              ; preserve RB (the next call modifies it).
    lcall           NUMUTILS_PARSE_FADDR
    jc              _poprb_err                      ; NUMUTILS_PARSE_FADDR sets the carry flag on error
    mov             RA,             [ADDR1H]        ; store the address in memory
    mov             RB,             [ADDR1L]
    pop             RB

    cmp             RD,             RB              ; end of buffer -> single address inspection
    jz              _single_inspect

    mov             [RC:RD],        RA              ; get the next character
    inc             RD

    cmp             RA,             '.'             ; '.' means we're parsing a range
    jz              _range

    cmp             RA,             ':'             ; ':' means we're setting a value in memory
    jz              _setval

    goto            _err

_command:
    mov             [RC:RD],        RA              ; get the next character
    cmp             RA,             'r'             ; if it's 'r' or 'R', run the last address
    jz              _run
    cmp             RA,             'R'
    jz              _run                            ; if not fall through to _err
    goto            _err
_run:
    mov             [ADDR1H],       RC              ; move the last address parsed to RC:RD
    mov             [ADDR1L],       RD
    lgoto           RC:RD                           ; transfer control to the address
_range:
    cmp             RB,             9               ; range inspection requires 9 characters: HHHH.HHHH
    jz              _parse_2nd_address
    goto            _err
_parse_2nd_address:
    push            RB                              ; preserve RB (the next call modifies it).
    lcall           NUMUTILS_PARSE_FADDR
    jc              _poprb_err                      ; NUMUTILS_PARSE_FADDR sets the carry flag on error
    mov             RA,             [ADDR2H]        ; store the address in memory
    mov             RB,             [ADDR2L]
    pop             RB                              ; restore RB
    goto            _range_inspect
    
_setval:
    cmp             RB,             RD              
    jz              _end                            ; RD == RB? -> no more values
    jc              _err                            ; RD >  RB? -> error
_setval_nextc:
    mov             [RC:RD],        RA              ; we expect a whitespace
    cmp             RA,             ' '
    jz              _setval_space
    goto            _err
_setval_space:
    inc             RD
    mov             [RC:RD],        RA              ; get next character
    push            RB                              ; preserve RB
    sub             RB,             RD              ; do we have less then 2 characters?
    cmp             RB,             2
    jc              _poprb_err                      ; -> error
    lcall           NUMUTILS_PARSEHEX               ; parse the first digit
    cmp             RA,             0xFF            
    jz              _poprb_err
    shl             RA                              ; store it in the MSB of RB
    shl             RA
    shl             RA
    shl             RA
    mov             RA,             RB
    inc             RD                              ; get next character
    mov             [RC:RD],        RA
    inc             RD
    lcall           NUMUTILS_PARSEHEX               ; parse second digit
    cmp             RA,             0xFF
    jz              _poprb_err
    add             RA,             RB              ; add the first digit
    push            RC                              ; preserve RC and RD
    push            RD
    mov             [ADDR1H],       RC              ; get the address we're loading with our value
    mov             [ADDR1L],       RD
    mov             RA,             [RC:RD]         ; store the value in RA
    inc             RD                              ; increment the address
    mov             RD,             [ADDR1L]
    jc              _setval_carryrc                 ; carry RC if needed
_setval_endloop:
    pop             RD                              ; pop RD, RC, RB
    pop             RC
    pop             RB
    goto            _setval
_setval_carryrc:
    inc             RC
    mov             RC,             [ADDR1H]
    goto            _setval_endloop

_single_inspect:
    mov             [ADDR1H],       [ADDR2H]        ; copy ADDR1 into ADDR2
    mov             [ADDR1L],       [ADDR2L]        
_range_inspect:
    mov             [ADDR2H],       RA              ; store the start address in RC:RD and the end address in RA:RB
    mov             [ADDR2L],       RB
    mov             [ADDR1H],       RC
    mov             [ADDR1L],       RD

    push            RA                              ; preserve RA
    goto            _insp_printaddr                 ; always print the first address

_insp_exec:
    push            RA                              ; preserve RA
    mov             RD,             RA              ; move RD to RA so we can modify it
    and             RA,             0x7             ; RA % 8 == 0? -> print address
    jz              _insp_printaddr
    goto            _insp_skipaddr
_insp_printaddr:
    mov             '\n',           [TTYOUT]        ; newline
    mov             RC,             RA              ; print address
    lcall           IOUTILS_PUTBYTE
    mov             RD,             RA
    lcall           IOUTILS_PUTBYTE
    mov             ':',            [TTYOUT]        ; print ": "
    mov             ' ',            [TTYOUT]
_insp_skipaddr:
    mov             [RC:RD],        RA              ; print the value, followed by whitespace
    lcall           IOUTILS_PUTBYTE
    mov             ' ',            [TTYOUT]
    pop             RA                              ; restore RA so it contains the end address high bits
_insp_check:
    cmp             RC,             RA              ; if RC (start page) < RA (end page page) -> continue loop
    jz              _insp_chk_finalpage
    goto            _insp_endloop
_insp_chk_finalpage:                     
    cmp             RD,             RB              ; if RD (start address) <= RB (end address) 
    jz              _end
    goto           _insp_endloop
_insp_endloop:
    inc             RD                              ; increment the address we're inspecting
    jc              _insp_carryrc                   ; carry RC if necessary
    goto            _insp_exec
_insp_carryrc:
    inc             RC
    goto            _insp_exec


_poprb_err:
    pop             RB
_err:
    mov             '?',            [TTYOUT]
_end:
    mov             '\n',           [TTYOUT]
    goto            notmon


.section DPAGE
ADDR1H:
    .res 1
ADDR1L:
    .res 1
ADDR2H:
    .res 1
ADDR2L:
    .res 1
PRSADRH:
    .res 1
PRSADRL:
    .res 1


    
%endif